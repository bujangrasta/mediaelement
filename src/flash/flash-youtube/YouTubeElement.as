package{	import flash.display.LoaderInfo;	import flash.display.Sprite;	import flash.net.NetConnection;	import flash.net.NetStream;	import flash.media.Video;	import flash.media.SoundTransform;	import flash.utils.Timer;			import flash.display.*;	import flash.events.*;	import flash.media.*;	import flash.net.*;	import flash.text.*;	import flash.system.*;	import flash.external.*;		import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundTransform;		import flash.net.URLRequest;	import flash.utils.Timer;		public class YouTubeElement extends Sprite	{		private var _isPaused:Boolean = true;		private var _isLoaded:Boolean = false;		private var _isPlaying:Boolean = false;		private var _isEnded:Boolean = false;		private var _isMuted:Boolean = false;		private var _preload:String = "";		private var _autoplay:Boolean = false;				private var _bytesLoaded:Number = 0;		private var _bytesTotal:Number = 0;		private var _bufferedTime:Number = 0;				private var _videoWidth:Number = -1;		private var _videoHeight:Number = -1;						private var _src:String = '';		private var _volume:Number = 1;		private var _currentTime:Number = 0;		private var _duration:Number = 0;				private var _timer:Timer;				private var _id:String;				// YouTube stuff		private var _playerLoader:Loader;		private var _player:DisplayObject = null;		private var _playerIsLoaded:Boolean = false;		private var _youTubeId:String = "";						// native video size (from meta data)		private var _nativeVideoWidth:Number = 0;		private var _nativeVideoHeight:Number = 0;				private var _stageWidth:Number;		private var _stageHeight:Number;				private var _initWidth:Number = 640;		private var _initHeight:Number = 360;						private static const STATE_ENDED:Number = 0;		private static const STATE_PLAYING:Number = 1;		private static const STATE_PAUSED:Number = 2;		private static const STATE_CUED:Number = 5;						private static const cueWhenLoaded:Boolean = false;		private static const CHROMELESS:Boolean = true;				public function YouTubeElement()		{			var flashVars:Object = LoaderInfo(this.root.loaderInfo).parameters;						_id = flashVars.uid // parseFloat(flashVars.uid) || 0;						// stage setup			stage.align = StageAlign.TOP_LEFT;			stage.scaleMode = StageScaleMode.NO_SCALE;			_stageWidth = stage.stageWidth;			_stageHeight = stage.stageHeight;						stage.addEventListener(Event.RESIZE, stageResizeHandler);			stage.addEventListener(MouseEvent.MOUSE_DOWN, stageClickHandler);			stage.addEventListener(FullScreenEvent.FULL_SCREEN, stageFullScreenChangeHandler);						stage.addEventListener(Event.MOUSE_LEAVE , stageMouseLeaveHandler);											_playerLoader = new Loader();			_playerLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, playerLoaderInitHandler);							if (CHROMELESS) {				_playerLoader.load(new URLRequest("http://www.youtube.com/apiplayer?version=3&controls=1&rel=0&showinfo=0&iv_load_policy=1"));			}						//ExternalInterface.call('console.log', 'FLASH - adding methods');						ExternalInterface.addCallback('get_src', get_src);			ExternalInterface.addCallback('get_paused', get_paused);			ExternalInterface.addCallback('get_volume',get_volume);			ExternalInterface.addCallback('get_currentTime', get_currentTime);			ExternalInterface.addCallback('get_duration', get_duration);			ExternalInterface.addCallback('get_buffered', get_buffered);						ExternalInterface.addCallback('set_src', set_src);			ExternalInterface.addCallback('set_paused', set_paused);			ExternalInterface.addCallback('set_volume', set_volume);			ExternalInterface.addCallback('set_currentTime', set_currentTime);			ExternalInterface.addCallback('set_duration', set_duration);								ExternalInterface.addCallback('fire_load', fire_load);			ExternalInterface.addCallback('fire_play', fire_play);			ExternalInterface.addCallback('fire_pause', fire_pause);			ExternalInterface.addCallback('fire_setSize', fire_setSize);						_timer = new Timer(250);			_timer.addEventListener(TimerEvent.TIMER, timerHander);									ExternalInterface.call('__ready__' + _id);								}				private function fire_setSize(width:Number, height:Number):void {						_stageWidth = width;			_stageHeight = height;						repositionVideo();		}						private function fire_load():void {					// do nothing			trace("yt load()");							if (_playerIsLoaded) {				_player.loadVideoById(_youTubeId);				_timer.start();								sendEvent("loadstart");			}  else {				/*				if (!_isChromless && _youTubeId != "") {					_playerLoader.load(new URLRequest("http://www.youtube.com/v/" + _youTubeId + "?version=3&controls=0&rel=0&showinfo=0&iv_load_policy=1"));				}				*/			}		}				private function fire_play():void {						if (_playerIsLoaded) {				_player.playVideo();			}					}				private function fire_pause():void {						if (_playerIsLoaded) {				_player.pauseVideo();			}			}						// src		private function getYouTubeId(url:String):String {			// http://www.youtube.com/watch?feature=player_embedded&v=yyWWXSwtPP0			// http://www.youtube.com/v/VIDEO_ID?version=3			// http://youtu.be/Djd6tPrxc08						url = unescape(url);						var youTubeId:String = "";						if (url.indexOf("?") > 0) {				// assuming: http://www.youtube.com/watch?feature=player_embedded&v=yyWWXSwtPP0				youTubeId = getYouTubeIdFromParam(url);								// if it's http://www.youtube.com/v/VIDEO_ID?version=3				if (youTubeId == "") {					youTubeId = getYouTubeIdFromUrl(url);				}			} else {				youTubeId = getYouTubeIdFromUrl(url);			}						return youTubeId;		}				// http://www.youtube.com/watch?feature=player_embedded&v=yyWWXSwtPP0		private function getYouTubeIdFromParam(url:String):String {						var youTubeId:String = "";			var parts:Array = url.split('?');			var parameters:Array = parts[1].split('&');						for (var i:Number=0; i<parameters.length; i++) {				var paramParts:Array = parameters[i].split('=');				if (paramParts[0] == "v") {								youTubeId = paramParts[1];					break;				}			}						return youTubeId;		}								// http://www.youtube.com/v/VIDEO_ID?version=3		// http://youtu.be/Djd6tPrxc08		private function getYouTubeIdFromUrl(url:String):String {						var youTubeId:String = "";						// remove any querystring elements			var parts:Array = url.split('?');			url = parts[0];						youTubeId = url.substring(url.lastIndexOf("/")+1);						return youTubeId;		}										private function set_src(value:String = ''):void {			trace("yt setSrc()" + value );						_src = value;						_youTubeId = getYouTubeId(value);						if (_playerIsLoaded) {				_player.cueVideoByUrl('http://www.youtube.com/v/' + _youTubeId + '?version=3');				sendEvent("loadstart");			} else {				if (CHROMELESS) {					cueWhenLoaded = true;				} else {					_playerLoader.load(new URLRequest("http://www.youtube.com/v/" + _youTubeId + "?version=3&controls=0&rel=0&showinfo=0&iv_load_policy=1"));				}			}		}		private function get_src():String {			return _src;		}				// paused		private function set_paused(value:*):void {			// do nothing		}		private function get_paused():Boolean {			return _isPaused;		}				// volume				private function set_volume(value:Number = NaN):void {			if (!isNaN(value)) {				_player.setVolume(value*100);				_volume = value;					sendEvent("volumechange");			}		}		private function get_volume():Number {			return _player.getVolume()*100;		}						// currentTime		private function set_currentTime(value:Number = NaN):void {						sendEvent("seeking");			_player.seekTo(value, true); // works in all places now			sendEvent("timeupdate");					}				private function get_currentTime():Number {			return _currentTime;		}				// duration		private function set_duration(value:*):void {			// do nothing		}			private function get_duration():Number {			return _duration;		}				private function get_buffered():Number {						if (_playerIsLoaded) {								return _player.getVideoLoadedFraction() * _duration;							} else {								return 0;			}					}								private function repositionVideo(fullscreen:Boolean = false):void {			//_output.appendText("positioning video\n");			if (fullscreen == true) {				_player.setSize(flash.system.Capabilities.screenResolutionX, flash.system.Capabilities.screenResolutionY);						} else {				_player.setSize(_stageWidth, _stageHeight);							}		}								//// EVENTS ////		private function playerLoaderInitHandler(event:Event):void {						trace("yt player init");						addChild(_playerLoader.content);			//setControlDepth();						//_playerLoader.content.addEventListener("onReady", playerReadyHandler);			_playerLoader.content.addEventListener(MouseEvent.MOUSE_DOWN, stageClickHandler);			_playerLoader.content.addEventListener(MouseEvent.MOUSE_OVER , stageMouseOverHandler);							_playerLoader.content.addEventListener("onReady", playerReadyHandler);			_playerLoader.content.addEventListener("onError", playerErrorHandler);			_playerLoader.content.addEventListener("onStateChange", playerStateChangeHandler);			_playerLoader.content.addEventListener("onPlaybackQualityChange", videoPlaybackQualityChangeHandler);						if (cueWhenLoaded) {				_player.cueVideoById(_youTubeId);				cueWhenLoaded = false;			}		}							private function playerReadyHandler(event:Event):void {			_playerIsLoaded = true;						_player = _playerLoader.content;						if (_initHeight > 0 && _initWidth > 0)				_player.setSize(_initWidth, _initHeight);							if (_youTubeId != "") { //  && _isChromeless) {				if (_autoplay) {					_player.loadVideoById(_youTubeId);				} else {					_player.cueVideoById(_youTubeId);				}				_timer.start();			}		}						private function playerErrorHandler(event:Event):void {			// trace("Player error:", Object(event).data);		}				private function playerStateChangeHandler(event:Event):void {			trace("State is", Object(event).data);						_duration = _player.getDuration();						switch (Object(event).data) {				case STATE_ENDED:					_isEnded = true;					_isPaused = false;										sendEvent("ended");										break;								case STATE_PLAYING:					_isEnded = false;					_isPaused = false;										sendEvent("play");					sendEvent("playing");					break;								case STATE_PAUSED:					_isEnded = false;					_isPaused = true;										sendEvent("pause");										break;								case STATE_CUED:					sendEvent("loadedmetadata");					sendEvent("loadeddata");					sendEvent("canplay");														// resize?					if (_autoplay) {						this.fire_play();					} else {						//this.fire_play();						//this.fire_pause();					}										break;			}		}				private function videoPlaybackQualityChangeHandler(event:Event):void {			trace("Current video quality:", Object(event).data);			//resizePlayer(Object(event).data);		}						private function timerHander(event:TimerEvent):void {						if (_playerIsLoaded) {				_bytesLoaded = _player.getVideoBytesLoaded();				_bytesTotal = _player.getVideoBytesTotal();				_currentTime = _player.getCurrentTime();								if (!_isPaused)					sendEvent("timeupdate");					if (_bytesLoaded < _bytesTotal)					sendEvent("progress");			}		}				private function _idHandler(value:String = ""):Boolean {			return (value === _id);		}				private function stageFullScreenChangeHandler(e:FullScreenEvent):void {			/*			_fullscreenButton.alpha = 0;			_isFullScreen = e.fullScreen;						sendEvent(HtmlMediaEvent.FULLSCREENCHANGE, "isFullScreen:" + e.fullScreen );			if (!e.fullScreen) {				_controlBar.visible = _alwaysShowControls;			}			*/		}		private function stageClickHandler(e:MouseEvent):void {			sendEvent("click");		}		private function stageMouseOverHandler(e:MouseEvent):void {			ExternalInterface.call('console.log', 'youtube mouseover');			sendEvent("mouseover");		}		private function stageMouseLeaveHandler(e:Event):void {			ExternalInterface.call('console.log', 'youtube mouseout');			sendEvent("mouseout");		}				private function stageResizeHandler(e:Event):void {			repositionVideo();		}										private function sendEvent(eventName:String):void {			//ExternalInterface.call('console.log', 'event', _id, eventName);						// TODO: export all values?			ExternalInterface.call('__event__' + _id, eventName);		}					}}