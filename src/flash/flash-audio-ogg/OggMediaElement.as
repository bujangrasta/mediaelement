package{	import flash.display.LoaderInfo;	import flash.display.Sprite;		import flash.events.*;	import flash.external.*;		import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundTransform;			import com.automatastudios.audio.audiodecoder.AudioDecoder;	import com.automatastudios.audio.audiodecoder.decoders.*;					import flash.net.URLStream;	import flash.net.URLRequest;	import flash.utils.Timer;		public class OggMediaElement extends Sprite	{				private var _isLoaded:Boolean = false;		private var _isPlaying:Boolean = false;		private var _playWhenLoaded:Boolean = false;		private var _isEnded:Boolean = false;				private var _src:String = '';		private var _volume:Number = 1;		private var _currentTime:Number = 0;		private var _duration:Number = 0;				private var _timer:Timer;		private var _id:String;				private var _urlRequest:URLRequest;		private var _urlStream:URLStream;		private var _decoder:AudioDecoder;				private var _sound:Sound = null;		private var _channel:SoundChannel;		private var _transform:SoundTransform = new SoundTransform(1, 0);				public function OggMediaElement()		{			trace("ready");						var flashVars:Object = LoaderInfo(this.root.loaderInfo).parameters;						_id = flashVars.uid // parseFloat(flashVars.uid) || 0;						_timer = new Timer(250);			_timer.addEventListener(TimerEvent.TIMER, timerHander);									// setup player			_urlStream = new URLStream();			_urlRequest = null;			_decoder = new AudioDecoder();			_decoder.load(_urlStream, OggVorbisDecoder, 8000);			_decoder.addEventListener(Event.INIT, onDecoderInit);			_decoder.addEventListener(Event.COMPLETE, onSoundComplete);			_decoder.addEventListener(IOErrorEvent.IO_ERROR, onIOError);						//ExternalInterface.call('console.log', 'FLASH - adding methods');						ExternalInterface.addCallback('get_src', get_src);			ExternalInterface.addCallback('get_paused', get_paused);			ExternalInterface.addCallback('get_volume',get_volume);			ExternalInterface.addCallback('get_currentTime', get_currentTime);			ExternalInterface.addCallback('get_duration', get_duration);			ExternalInterface.addCallback('get_ended', get_ended);			ExternalInterface.addCallback('set_src', set_src);			ExternalInterface.addCallback('set_paused', set_paused);			ExternalInterface.addCallback('set_volume', set_volume);			ExternalInterface.addCallback('set_currentTime', set_currentTime);			ExternalInterface.addCallback('set_duration', set_duration);								ExternalInterface.addCallback('fire_load', fire_load);			ExternalInterface.addCallback('fire_play', fire_play);			ExternalInterface.addCallback('fire_pause', fire_pause);						ExternalInterface.call('__ready__' + _id);						//ExternalInterface.call('console.log', 'YIPPPEEEE', _id);						//set_src('audio.ogg');			//fire_load();			//fire_play();		}				private function onDecoderInit(event:Event):void {			//trace(_decoder.audioInfo.toString());			//_channel = _decoder.play();						sendEvent('loadedmetadata');						ExternalInterface.call('console.log', '[[OGG]]', 'onDecoderInit');					}				private function onIOError(event:IOErrorEvent):void {			trace("IO ERROR: " + event.text);		}				private function onSoundComplete(event:Event):void {						sendEvent('ended');		}										private function fire_load():void {			if (!_isLoaded && _src) {									_urlRequest = new URLRequest(_src);				_urlStream.load(_urlRequest);								sendEvent("loadstart");			}		}				private function fire_play():void {						_playWhenLoaded = true;						if (!_isPlaying && _src) {								if (_urlRequest == null) {					fire_load();					return;				}								_timer.stop();								_channel = _decoder.play();				_channel.removeEventListener(Event.SOUND_COMPLETE, soundCompleteHandler);				_channel.addEventListener(Event.SOUND_COMPLETE, soundCompleteHandler);												_isPlaying = true;				_playWhenLoaded = false;				_isEnded = false;								sendEvent("play");				sendEvent("playing");								_timer.start();			}		}				private function fire_pause():void {			_playWhenLoaded = false;						if (_isPlaying) {				_channel.stop();				_isPlaying = false;								_timer.stop();								sendEvent("pause");			}		}						// src		private function set_src(value:String = ''):void {			_src = value;						if (_playWhenLoaded) {				fire_play();			}		}		private function get_src():String {			return _src;		}				// paused		private function set_paused(value:*):void {			// do nothing		}		private function get_paused():Boolean {			return !_isPlaying;		}				// volume				private function set_volume(value:Number = NaN):void {			if (!isNaN(value)) {								_volume = value;								if (_request) {					_transform.volume = _volume;					_channel.soundTransform = _transform;				}			}		}		private function get_volume():Number {			return _volume;		}						// currentTime		private function set_currentTime(value:Number = NaN):void {						//ExternalInterface.call('console.log', 'event', _id, eventName);									if (!isNaN(value) && _isPlaying) {								sendEvent("seeking");								_channel.stop();				_currentTime = value;				_channel = _sound.play(_currentTime * 1000, 0, _transform);								sendEvent("seeked");							}		}				private function get_currentTime():Number {			if (_channel != null) {				_currentTime = _channel.position / 1000;			}			return _currentTime;		}				// duration		private function set_duration(value:*):void {			// do nothing		}			private function get_duration():Number {						ExternalInterface.call('console.log', '[[OGG]]', 'duration', _decoder.getTotalTime());									// returns negative number?			_duration = Math.abs(_decoder.getTotalTime() / 10);					return _duration;		}		private function get_ended():Boolean {			return _isEnded;		}						//// EVENTS ////				private function ioErrorHandler(event:Event):void {						//ExternalInterface.call('console.log', 'ioErrorHandler');			//ExternalInterface.call('console.log', event);						sendEvent("error");		}				private function timerHander(event:TimerEvent):void {						if (_channel != null) {				_currentTime = _channel.position / 1000;			}						sendEvent("timeupdate");		}				private function _idHandler(value:String = ""):Boolean {			return (value === _id);		}				private function soundCompleteHandler(e:Event):void {			handleEnded();		}		private function handleEnded():void {			_timer.stop();			_currentTime = 0;			_isEnded = true;			sendEvent("ended");		}						private function sendEvent(eventName:String):void {			//ExternalInterface.call('console.log', 'event', _id, eventName);						ExternalInterface.call('__event__' + _id, eventName);		}	}}