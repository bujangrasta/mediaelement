package {		import flash.display.Sprite;	import flash.media.Video;	import flash.media.SoundTransform;	import org.mangui.hls.HLS;	import org.mangui.hls.HLSSettings;	import org.mangui.hls.event.HLSEvent;	import org.mangui.hls.constant.HLSPlayStates;	import org.mangui.hls.utils.Log;		import flash.events.Event;	import flash.events.MouseEvent;				import flash.display.*;	import flash.events.*;	import flash.media.*;	import flash.net.*;	import flash.text.*;	import flash.system.*;	import flash.external.*;			public class HlsElement extends Sprite {				private var _playqueued:Boolean = false;		private var _autoplay:Boolean = true;		private var _preload:String = "";		private var _hls:HLS;		private var _url:String;		private var _video:Video;		private var _hlsState:String = HLSPlayStates.IDLE;				// event values		private var _position:Number = 0;		private var _duration:Number = 0;		private var _framerate:Number;		private var _isManifestLoaded:Boolean = false;		private var _isPaused:Boolean = true;		private var _isEnded:Boolean = false;		private var _volume:Number = 1;		private var _isMuted:Boolean = false;				private var _bytesLoaded:Number = 0;		private var _bytesTotal:Number = 0;		private var _bufferedTime:Number = 0;		private var _bufferEmpty:Boolean = false;		private var _bufferingChanged:Boolean = false;		private var _seekOffset:Number = 0;						private var _videoWidth:Number = -1;		private var _videoHeight:Number = -1;				private var _id:String;					// native video size (from meta data)		private var _nativeVideoWidth:Number = 0;		private var _nativeVideoHeight:Number = 0;				private var _stageWidth:Number;		private var _stageHeight:Number;				public function HlsElement() {						var flashVars:Object = LoaderInfo(this.root.loaderInfo).parameters;						_id = flashVars.uid;						// stage setup			stage.align = StageAlign.TOP_LEFT;			stage.scaleMode = StageScaleMode.NO_SCALE;			_stageWidth = stage.stageWidth;			_stageHeight = stage.stageHeight;						stage.addEventListener(Event.RESIZE, stageResizeHandler);			stage.addEventListener(MouseEvent.MOUSE_DOWN, stageClickHandler);			stage.addEventListener(MouseEvent.MOUSE_OVER , stageMouseOverHandler);			stage.addEventListener(Event.MOUSE_LEAVE, stageMouseLeaveHandler);																	// video setup			_display = new Sprite();			addChild(_display);									_video = new Video();			_display.addChild(_video);			_display.addEventListener(MouseEvent.MOUSE_OVER, stageMouseOverHandler);						_display.x = _video.x = 0;			_display.y = _video.y = 0;			_display.width = _video.width = _stageWidth;			_display.height = _video.height = _stageHeight;												_hls = new HLS();			_hls.addEventListener(HLSEvent.PLAYBACK_COMPLETE,_completeHandler);			_hls.addEventListener(HLSEvent.ERROR,_errorHandler);			_hls.addEventListener(HLSEvent.MANIFEST_LOADED,_manifestHandler);			_hls.addEventListener(HLSEvent.MEDIA_TIME,_mediaTimeHandler);			_hls.addEventListener(HLSEvent.PLAYBACK_STATE,_stateHandler);			_hls.stream.soundTransform = new SoundTransform(_volume);			_video.attachNetStream(_hls.stream);												if (ExternalInterface.available) {											ExternalInterface.addCallback('get_src', get_src);				ExternalInterface.addCallback('get_volume',get_volume);				ExternalInterface.addCallback('get_currentTime', get_currentTime);				ExternalInterface.addCallback('get_muted', get_muted);						ExternalInterface.addCallback('get_buffered', get_buffered);						ExternalInterface.addCallback('get_duration', get_duration);							ExternalInterface.addCallback('get_paused', get_paused);											ExternalInterface.addCallback('set_src', set_src);				ExternalInterface.addCallback('set_volume', set_volume);				ExternalInterface.addCallback('set_currentTime', set_currentTime);				ExternalInterface.addCallback('set_muted', set_muted);						//ExternalInterface.addCallback('set_duration', set_duration);						//ExternalInterface.addCallback('set_paused', set_paused);											ExternalInterface.addCallback('fire_load', fire_load);				ExternalInterface.addCallback('fire_play', fire_play);				ExternalInterface.addCallback('fire_pause', fire_pause);				ExternalInterface.addCallback('fire_setSize', fire_setSize);				ExternalInterface.addCallback('fire_stop', fire_stop);									ExternalInterface.call('__ready__' + _id);								ExternalInterface.call('console.log','FLASH HLS ready', _id);					}			}				private function log():void {			if (ExternalInterface.available) {								ExternalInterface.call('console.log', arguments);							} else {				trace(arguments);			}					}		private function _completeHandler(event:HLSEvent):void {			_isEnded = true;			_isPaused = true;			sendEvent(HtmlMediaEvent.PAUSE);			sendEvent(HtmlMediaEvent.ENDED);		}					private function _errorHandler(event:HLSEvent):void {			sendEvent(event.toString());		};					private function _manifestHandler(event:HLSEvent):void {			_duration = event.levels[0].duration;			_videoWidth = event.levels[0].width;			_videoHeight = event.levels[0].height;			_isManifestLoaded = true;			_hls.stage = _video.stage;			sendEvent("loadedmetadata");			sendEvent("canplay");			if(_autoplay || _playqueued) {				_playqueued = false;				_hls.stream.play();			}		};					private function _mediaTimeHandler(event:HLSEvent):void {			_position = event.mediatime.position;			_duration = event.mediatime.duration;			_bufferedTime = event.mediatime.buffer+event.mediatime.position;					sendEvent("progress");			sendEvent("timeupdate");		};					private function _stateHandler(event:HLSEvent):void {			_hlsState = event.state;			//Log.txt("state:"+ _hlsState);						log('HLS State', _hlsState);						switch(event.state) {				case HLSPlayStates.IDLE:					break;								case HLSPlayStates.PAUSED_BUFFERING:				case HLSPlayStates.PLAYING_BUFFERING:					break;									case HLSPlayStates.PLAYING:							_isPaused = false;					_isEnded = false;					_video.visible = true;					sendEvent("loadeddata");					sendEvent("play");					sendEvent("playing");					break;					case HLSPlayStates.PAUSED:					_isPaused = true;					_isEnded = false;					sendEvent("pause");					sendEvent("canplay");					break;			}		};					public function fire_play():void {			if(!_isManifestLoaded) {				_playqueued = true;				return;			}				if (_hlsState == HLSPlayStates.PAUSED || _hlsState == HLSPlayStates.PAUSED_BUFFERING) {				_hls.stream.resume();			} else {				_hls.stream.play();			}		}					public function fire_pause():void {			if(!_isManifestLoaded)			return;			//Log.txt("HLSMediaElement:pause");			_hls.stream.pause();		}					public function fire_load():void{			//Log.txt("HLSMediaElement:load");					if(_url) {				sendEvent("loadstart");				_hls.load(_url);			}		}					public function fire_stop():void{			_hls.stream.close();			_video.clear();						_isManifestLoaded = false;			_duration = 0;			_position = 0;			_playqueued = false;						sendEvent("stop");					}			private function fire_setSize(width:Number, height:Number):void {								_stageWidth = width;			_stageHeight = height;						_video.width = width;			_video.height = height;									repositionVideo();		}										public function set_src(url:String):void{			//Log.txt("HLSMediaElement:setSrc:"+url);			log("setSrc", url);						fire_stop();			_url = url;			_hls.load(_url);		}				public function get_src():String{			return _url;		}								public function set_currentTime(pos:Number):void{			if(!_isManifestLoaded)				return;						sendEvent("seeking");			_hls.stream.seek(pos);		}		public function get_currentTime():Number {			return _position;		}							public function set_volume(vol:Number):void{			_volume = vol;			_isMuted = (_volume == 0);			_hls.stream.soundTransform = new SoundTransform(vol);			sendEvent("volumechange");		}					public function get_volume():Number {			if(_isMuted) {				return 0;			} else {				return _volume;			}		}					public function set_muted(muted:Boolean):void {					// ignore if no change			if (muted === _isMuted)				return;						_isMuted = muted;						if (muted) {				_hls.stream.soundTransform = new SoundTransform(0);				sendEvent("volumechange");			} else {				set_volume(_volume);			}		}		public function get_muted():Boolean {			return _isMuted;		}				public function get_paused():Boolean {			return _isPaused;		}		public function set_paused(paused:Boolean):void{			if (paused) {				fire_pause();			}		}						public function get_duration():Number{			return _duration;		}								public function get_seekLimit():Number {			return _duration;		}					public function get_buffered():Number {			var progress:Number = 0;			if (_duration != 0) {				progress = Math.round( (_bufferedTime / _duration) * 100 );			}			return progress;		}				private function repositionVideo():void {					}					private function stageClickHandler(e:MouseEvent):void {			sendEvent("click");		}		private function stageMouseOverHandler(e:MouseEvent):void {			//ExternalInterface.call('console.log', 'flash mouseover');			sendEvent("mouseover");		}		private function stageMouseLeaveHandler(e:Event):void {			//ExternalInterface.call('console.log', 'flash mouseout');			sendEvent("mouseout");			sendEvent("mouseleave");					}						private function stageResizeHandler(e:Event):void {			repositionVideo();		}						private function sendEvent(eventName:String):void {			//ExternalInterface.call('console.log', 'event', _id, eventName);						// TODO: export all values?			if (ExternalInterface.available) {				ExternalInterface.call('__event__' + _id, eventName);			}		}					}}